trigger:
  - master
  - develop

name: $(BuildID)-$(Build.SourceBranchName)

pool:
  vmImage: "ubuntu-latest"

variables:
  ${{ if notIn(variables['Build.SourceBranchName'], 'master', 'develop') }}:
    buildCommand: 'run developbuild'
    buildImage: false
    deployService: false
    deployEnvironment: 'no'
    imageTags: 'no'
    serviceName: 'no'
  ${{ if eq(variables['Build.SourceBranchName'], 'develop') }}:
    buildCommand: 'run developbuild'
    buildImage: true
    deployService: true
    deployEnvironment: development
    imageTags: |
      $(Build.BuildId)
      develop
    serviceName: itlab-develop_front
  ${{ if eq(variables['Build.SourceBranchName'], 'master') }}:
    buildCommand: 'run build'
    buildImage: true
    deployService: true
    deployEnvironment: production
    imageTags: |
      $(Build.BuildId)
      latest
    serviceName: itlab-front

stages:
- stage: Build
  jobs:
  - job: BuildApp
    steps:
    - task: Npm@1
      displayName: npm ci
      inputs:
        command: 'ci'
    - task: Npm@1
      displayName: npm run build
      inputs:
        command: 'custom'
        customCommand: ${{variables.buildCommand}}
    - publish: deploy
      artifact: itlab-front-build
- stage: PackInDocker
  condition: and(succeeded(), ${{variables.buildImage}})
  jobs:
  - job: PackFront
    steps:
      - checkout: none
      - download: current
        artifact: itlab-front-build
      - task: Docker@2
        displayName: Build image for docker hub
        inputs:
          containerRegistry: 'rtuitlab connection by admin'
          repository: 'rtuitlab/itlab-front'
          command: 'buildAndPush'
          Dockerfile: '$(Pipeline.Workspace)/itlab-front-build/Dockerfile'
          buildContext: '$(Pipeline.Workspace)/itlab-front-build'
          tags: ${{variables.imageTags}}
      - task: Docker@2
        displayName: Build image for private docker registry
        inputs:
          containerRegistry: 'private rtuitlab registry'
          repository: 'rtuitlab/itlab-front'
          command: 'buildAndPush'
          Dockerfile: '$(Pipeline.Workspace)/itlab-front-build/Dockerfile'
          buildContext: '$(Pipeline.Workspace)/itlab-front-build'
          tags: ${{variables.imageTags}}
- stage: UpdateService
  condition: and(succeeded(), ${{variables.deployService}})
  jobs:
  - deployment: Deploy
    pool:
      vmImage: 'ubuntu-latest'
    environment: ${{variables.deployEnvironment}}
    strategy:
      runOnce:
        deploy:
          steps:
            - download: none
            - task: SSH@0
              inputs:
                sshEndpoint: 'swarm manager'
                runOptions: 'commands'
                commands: 'docker service update --image registry.rtuitlab.dev/rtuitlab/itlab-front:$(Build.BuildId) ${{variables.serviceName}} --with-registry-auth'
                readyTimeout: '20000'
